\documentclass[12pt]{article}

\input{structure.tex} 

\begin{document}
 
\title{Beschreibungslogik | Übung 04}
\author{D. Marschner, A. Mahdavi\\
\href{mailto:alma@uni-bremen.de}{alma@uni-bremen.de}}
\date{}
\maketitle
\section*{Aufgabe 1)}
\subsection*{a)}
Wahr, intuitiv ist jeder semantische Typ auch ein syntaktischer Typ, umgekehrt ist das nicht der Fall. Das Ziel der Typelimination ist es, diejenigen syntaktischen Typen zu eliminieren, die im Modell der TBox nicht zu finden sind.\\
\subsection*{b)}
Falsch! Schlussfolgerung Probleme Äquivalenz, Subsumtion und Konzept Erfüllbarkeit in Bezug auf T-Boxen sind in wechselseitiger Abhängigkeit. Man kann sie Polynomiell aufeinander reduzieren. 
Vgl: Lemma 2.9\\

\subsection*{c)}
Wahr, Der Tableau-Algorithmus benötigt im Worst-Case eine 3-fache exponentielle Laufzeit, aber die Typelimination benötigt  im Worst- sowie Best Case nur eine exponentielle Laufzeit.\\
\subsection*{d)}
Falsch! Es gibt nur $2^n$ viele Typen und nach jedem Schritt der repeat-Schleife wird mindestens ein Typ eliminiert. -> Schleife terminiert nach maximal $2^n$ Durchläufen. Vgl. auch Folie 5.13.\\
\subsection*{e)}
Wahr, denn bei der Typelimination generiert man alle Typen für $C_0$ und T (exponentiell viele), wobei jeder Typ t Teilmenge von t $sub(C_0, T )$ ist. $sub(C_0, T)$ ist schon eine Art “Absorption”, da die Menge $sub(C_0,T)$ keine doppelte Konzepte enthält. Also die meisten “doppelten”,”unnötigen” Konzepte, die man durch Absorption verwerfen könnte, werden durch die Generierung der Sub-Menge per Definition ohnehin entfernt.\\

\subsection*{f)}
Wahr!  Es kann zwar ein $\Imc$ geben mit: \{$t_{\Imc}(d) | d \in \Delta^{\Imc} $\}  $\subseteq \Gamma$\\
aber der zweite Teil: $t = t_{\Imc}(d_0)$ für ein $d_0 \in \Delta^{\Imc} $ ist unmöglich erfüllbar, da intuitiv $t(d_0)$ mindestens eine Existenz Restriktion hat, für die es keinen r-Nachfolger (Zeuge) gibt. Somit wird es nie eine Interpretation $\Imc$ geben, für die gilt:  $t = t_{\Imc}(d_0)$ für ein $d_0 \in \Delta^{\Imc} $  Vgl: Definition 5.3 schlechter Typ.


\section*{Aufgabe 2)}
\subsection*{a)}
$C_0$ = $\exists r. \neg A$ erfüllbar bzgl. $\Tmc$ = $\{\forall r.A \sqsubseteq A, A \sqsubseteq \bot, \forall r.A \sqsubseteq \exists r.A\}$\\
\\
$\Tmc$ in NNF bringen:
%
\begin{flalign*}
\Tmc & = \{\forall r.A \sqsubseteq A, A \sqsubseteq \bot, \forall r.A \sqsubseteq \exists r.A\}\\
&= \{\top \sqsubseteq (\neg \forall r.A \sqcup A) \sqcap (\neg A \sqcup \bot) \sqcap (\neg \forall r.A \sqcup \exists r.A) \}\\
&= \{\top \sqsubseteq (\exists r. \neg A \sqcup A) \sqcap \neg A \sqcap (\exists r. \neg A \sqcup \exists r.A) \}
\end{flalign*}
%
$\Tmc$ = $\{\top \sqsubseteq C_{\Tmc} \}$ mit $C_{\Tmc}$ = $\{(\exists r. \neg A \sqcup A) \sqcap \neg A \sqcap (\exists r. \neg A \sqcup \exists r.A) \}$\\
\\
$sub(C_0,\Tmc)$ generieren:
%
\begin{flalign*}
sub(C_0,\Tmc) & = \{\exists r. \neg A, C_{\Tmc}, \exists r. \neg A \sqcup A, \neg A, \exists r. \neg A \sqcup \exists r.A, A, \exists r.A\}
\end{flalign*}
%
Wegen $C_{\Tmc} \in t$ für jeden Typen $t$ für $C_0$ und $\Tmc$ und der Typ-Bedingung für $\sqcap$, muss jeder Typ die Menge $M = \{C_{\Tmc}, \exists r. \neg A \sqcup A, \neg A, \exists r. \neg A \sqcup \exists r.A \}$ enthalten.
Aufgrund der Regel-(1) von Definition 5.2 (Typ) und weil $\neg A \in M$ ist $A \not \in t$. Dadurch ergibt sich mit der $\sqcup$-Regel, dass $\exists r. \neg A \in t$ sein muss.\\
Somit ist $M = \{C_{\Tmc}, \exists r. \neg A \sqcup A, \neg A, \exists r. \neg A \sqcup \exists r.A, \exists r. \neg A\}$.
\\
Man kann sich also leicht überzeugen, dass es insgesamt zwei Typen für $C_0$ und $\Tmc$ gibt, nämlich:
%
\begin{flalign*}
& t_0 = M \cup \{\exists r.A \}\\
& t_1 = M
\end{flalign*}
%
Der Typ $t_0$ ist schlecht in der Menge aller Typen: für $\exists r.A \in t_0$ und $\exists r. \neg A \in t_0$ ist die Menge aus Definition 5.3 $\{A, \neg A\}$, aber kein Typ enthält sowohl $A$ als auch $\neg A$.\\
Der Typ $t_1$ ist nicht schlecht in der Menge aller Typen: für $\exists r. \neg A \in t_1$ ist die Menge aus Definition 5.3 $\{\neg A\}$, wobei $t_1$ selbst $\neg A$ enthält. Also $\neg A \in t_1 = t'$.\\
\\
Das Typeliminationsverfahren berechnet folgende Mengen:
%
\begin{flalign*}
%
\Gamma_0 & = \{t_0,t_1\}\\
%
\Gamma_1 & = \{t_1\}\\
%
\Gamma_2 & = \{t_1\}
%
\end{flalign*}
%
Der Algorithmus stoppt, weil $\Gamma_1$ = $\Gamma_2$.\\
Das Ergebnis ist $erfüllbar$, weil es ein $t = t_1 \in \Gamma_2$ gibt mit $C_0 = \exists r. \neg A \in t$.
\section*{Aufgabe 3)}
\subsection*{a)}
Nach der ersten und zweiten Runde setzt Spieler1 die $p_2$ und $p_3$ auf 1 Spieler 2 wird gezwungen, $q_1$ und $q_2$ auf 1 zu setzen. Dann wird der dritte Teil der Formel Wahr und folglich wird die ganze Formel wahr und Spieler 1 wird gewinnen. Spieler 2 könnte in der vierten Runde ohne eine Änderung spielen, aber in der nächsten Runde würde Spieler1 $p_4$ auf 1 setzen und würde sofort gewinnen.\\

\begin{table}
\centering
\begin{tabular}{llllllll}
pl    & p1 & p2 & p3 & p4 & q1 & q2 &  result  \\
$\pi$ &0    &0    &0    &0    &0    &0    &$(0)\vee(0) \vee(0)$         \\
S1	  &0    &1    &0    &0    &0    &0    &$(0)\vee(0) \vee(0)$         \\
S2	  &0    &1    &0    &0    &1    &0    &$(0)\vee(0) \vee(0)$         \\
S1	  &0    &1    &1    &0    &1    &0    &$(0)\vee(0) \vee(0)$         \\
S2	  &0    &1    &1    &0    &1    &1    &$(0)\vee(0) \vee(1)$         \\    
\end{tabular}
\end{table}

\subsection*{b)}
Spieler2 kann das Spiel gewinnen, indem er rückgängig macht, was Spieler1 gespielt hat.\\

\begin{table}

\begin{tabular}{llllll}
pl & 	p1 & p2 & q1 & q3 & result  \\
$\pi$   &0    &0    &0    &0    & $((0)\wedge(0)\wedge(1) ) \vee  ( (1)\wedge(1)\wedge(0) ) $         \\
   &    &    &    &    &         \\
   &    &    &    &    &         \\
   &    &    &    &    &         \\
   &    &    &    &    &         \\
   &    &    &    &    &         \\
   &    &    &    &    &         \\
   &    &    &    &    &        
\end{tabular}
\end{table}



\section*{Aufgabe 4)}
tbd

\section*{Aufgabe 5)}
tbd


\end{document}
 